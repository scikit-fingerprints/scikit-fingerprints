include = [
    "pyproject.toml",
    "benchmarking/**/*.ipynb",
    "examples/**/*.py",
    "skfp/**/*.py",
    "tests/**/*.py"
]
exclude = [
    "docs/**"
]

[lint]
select = ["ALL"]
ignore = [
    "ANN",  # use mypy for annotations
    "N806",   # uppercase variables, e.g. X_train
    "N803",  # uppercase variables, e.g. X_train
    "FA100",  # regular Optional import
    "D100",   # no docstrings in public modules
    "T201",   # print() allowed
    "D213",   # start docs on next line
    "TRY003",  # long error messages
    "PLR2004",  # numerical constants
    "FBT001",  # bool positional arguments
    "FBT002",  # bool default positional arguments
    "D107",  # no __init__ docstrings
    "PLR0913",  # many arguments
    "SLF001",  # use private members
    "RUF012",  # mutable class attributes
    "D205",  # no blank line between summary and description
    "RUF002",  # allow long dash in citations
    "PD901",  # df variable for DataFrames
    "D104",  # no package docstrings
    "PT011",  # use ValueError
    "E731",  # Lambda expressions
    "PGH003",  # ignore types where necessary
    "D212",  # start docstrings on second line
    "D413",  # no empty line after last docstring section
    "COM812",  # no trailing commas
    "C408",  # call dict(), list(), set()
    "D200",  # always multiline docstings
    "EM",  # string messages for exceptions
    "SIM108",  # if/else instead of ternary if when we need
    "RET",  # format returns as we need for readability
    "PTH",  # use os instead of Pathlib when we need
    "PYI041",  # explicitly mark Union[int, float] for readability
    "PLW2901",  # overwrite loop variable for readability
    "B028",  # simple warnings
    "N802",  # uppercase names for functions when readable, e.g. 3D
    "D203"  # prefer D211, no blank line between docstring and code
]

[lint.per-file-ignores]
# allow unused imports which shorten import paths
"skfp/**__init__.py**" = ["F401"]

"skfp/bases/**.py" = [
    "ARG002",  # allow unused arguments for scikit-learn compatibility
    "D401",    # non-imperative descriptions
]

"tests/**" = [
    "S101",  # assert
    "S311",  # pseudo-random generation
    "D103",  # no docstrings for tests
    "PT006",  # lists in pytest.mark.parametrize
    "RUF005",  # adding lists
    "TRY004",  # AssertionError in tests, not TypeError
    "ARG001",  # unused arguments in scikit-learn tests
    "S301",  # pickle
    "PERF203",  # exceptions in loops
    "PLW2901",  # overwriting variables in loops
    "PLW0603",  # global variables in scikit-learn tests
    "SIM108",  # if-else instead of ternary operations for long lines
    "D101",  # no docstrings in helper classes
    "NPY002",  # np.random.rand
    "PLR1704",  # redefine arguments as variables
    "SIM211",  # explicit False/True for readability
]

"benchmarking/**.py" = [
    "D103",     # no docstrings
    "PLR0912",  # many branches
    "INP001",   # implicit package
    "C901",     # complex code
    "NPY002",   # np.random.seed
    "PLR0915",  # many statements
]

# no docstrings in examples
"examples/**" = ["D103"]

[lint.pycodestyle]
# formatter will reformat lines to length 88, so we report errors only for
# extremely long lines
max-line-length = 200